/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package crud.java;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.List;


public class App {

    private DbConnector dbCon;
    private List<String> dbTables;

    // DB Metadata

    protected List<String> getDbTables(Connection connection) {
        try {
            // Aborts if connection is closed
            if (connection.isClosed()) {
                return null;
            }
            // Gets an array of strings, where each string is the name of a database table
            DatabaseMetaData dbMeta = connection.getMetaData();

            String catalog = this.dbCon.getConProps().getProperty("db.name");
            String schemaPattern = null;
            String tableNamePattern = null;
            String[] types = { "TABLE" };

            ResultSet dbTablesSet = dbMeta.getTables(catalog, schemaPattern, tableNamePattern, types);
            dbTablesSet.beforeFirst();
            dbTablesSet.next();
            this.dbTables = new ArrayList<String>();
            while (!dbTablesSet.isAfterLast()) {
                this.dbTables.add(dbTablesSet.getString("TABLE_NAME"));
                dbTablesSet.next();
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        return this.dbTables;
    }

    // CLI - Main Menu

    protected void runMainMenu(Scanner cliSc) {
        int input = 0;
        do {
            this.displayMainMenu();
            System.out.print("Enter your choice: ");
            input = cliSc.nextInt();
            if (input != 0) {
                this.runCrudMenu(cliSc, input-1);
                input = cliSc.nextInt();
            }
        } while (input != 0);
    }

    protected void displayMainMenu() {
        System.out.println("\nChoose one of the following tables by number to perform operations on or enter '0' to quit.");
        System.out.println("\t0: QUIT");
        for (int i = 0; i < this.dbTables.size(); i++) {
            System.out.println("\t" + (i+1) + ": " + this.dbTables.get(i));
        }
    }

    // CLI - Crud Menu

    protected void runCrudMenu(Scanner cliSc, int iTable) {
        int crudInput = 0;
        do {
            displayCrudMenu(this.dbTables.get(iTable));
            System.out.print("Enter your choice: ");
            crudInput = cliSc.nextInt();
            System.out.print("This is skipping this");
        } while (crudInput != 0);
    }

    protected void displayCrudMenu(String tableName) {
        System.out.println(String.format("\nWhich operation would you like to perform on table '%s'?", tableName));
        System.out.println("\t0: BACK TO MAIN MENU");
        System.out.println("\t1: Create Item");
        System.out.println("\t2: Read Item");
        System.out.println("\t3: Update Item");
        System.out.println("\t4: Delete Item");
    }

    // CRUD

    String createTemplate = "INSERT INTO %s VALUES %s";

    protected void create(Connection connection, String table, boolean persist) throws SQLException {
        // Aborts if connection is closed
        if (connection.isClosed()) {
            return;
        }
        // Gets user input, depending on chosen table
        
    }

    protected String getColumnsInput(String table) {

        return "";
    }

    protected void read(Connection connection, String table, boolean persist) {
        
    }

    protected void update(Connection connection, String table, boolean persist) {
        
    }

    protected void delete(Connection connection, String table, boolean persist) {
        
    }

    private void run() {
        this.dbCon = new DbConnector();
        this.getDbTables(this.dbCon.getCon());

        Scanner cliSc = new Scanner(System.in);
        this.runMainMenu(cliSc);
        cliSc.close();

        this.dbCon.closeDbConnection();
    }

    public static void main(String[] args) {
        System.out.println("Welcome to my CRUD-Java CLI tool!");
        App app = new App();
        app.run();
    }
}
