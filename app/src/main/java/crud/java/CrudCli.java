/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package crud.java;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;


class CrudCli {

    // Crud Menu

    protected static void runCrudMenu(Scanner sc, DbMetadata dbMetadata, String tableName) {
        int crudInput = 0;
        do {
            CrudCli.displayCrudMenu(tableName);
            System.out.print("Enter your choice: ");
            crudInput = sc.nextInt();
            switch (crudInput) {
                case 1:
                    create(sc, dbMetadata, tableName);
                    break;
                case 2:
                    read(sc, dbMetadata, tableName);
                    break;
                case 3:
                    update(sc, dbMetadata, tableName);
                    break;
                case 4:
                    delete(sc, dbMetadata, tableName);
                    break;
                default:
                    break;
            }
        } while (crudInput != 0);

        System.out.println("Going back to main menu.");

    }

    protected static void displayCrudMenu(String tableName) {
        System.out.println(String.format("\nWhich operation would you like to perform on table '%s'?", tableName));
        System.out.println("\t0: BACK TO MAIN MENU");
        System.out.println("\t1: Create Item");
        System.out.println("\t2: Read Item");
        System.out.println("\t3: Update Item");
        System.out.println("\t4: Delete Item");
    }

    // Crud Callers

    private static void create(Scanner sc, DbMetadata dbMetadata, String tableName) {
        System.out.println("Selected Create.");
        HashMap<String, String> values = new HashMap<String, String>();
        boolean runCreate = Crud.askForColsValues(sc, dbMetadata, tableName, values);
        if (!runCreate) {
            System.out.println("Operation canceled.");
            return;
        }
        Crud.create(dbMetadata.getCon(), tableName, values);
    }

    private static void read(Scanner sc, DbMetadata dbMetadata, String tableName) {
        System.out.println("Selected Read.");
        HashMap<String, String> selectedCols = new HashMap<String, String>();
        boolean getFilter = Crud.askSelectCols(sc, dbMetadata, tableName, selectedCols);
        if (!getFilter) {
            System.out.println("Operation canceled.");
            return;
        }
        HashMap<String, String> colsFilters = new HashMap<String, String>();
        boolean getFilterStr = Crud.askFilters(sc, dbMetadata, tableName, colsFilters);
        if (!getFilterStr) {
            System.out.println("Operation canceled.");
            return;
        }
        ArrayList<String> filterStrList = new ArrayList<String>();
        boolean runRead = Crud.askFilterArrangement(sc, dbMetadata, tableName, colsFilters, filterStrList);
        if (!runRead) {
            System.out.println("Operation canceled.");
            return;
        }
        Crud.read(dbMetadata.getCon(), tableName, selectedCols.keySet(), filterStrList);
    }

    private static void update(Scanner sc, DbMetadata dbMetadata, String tableName) {
        System.out.println("Selected Update.");
        HashMap<String, String> selectedCols = new HashMap<String, String>();
        boolean getFilter = Crud.askSelectCols(sc, dbMetadata, tableName, selectedCols);
        if (!getFilter) {
            System.out.println("Operation canceled.");
            return;
        }
        HashMap<String, String> colsFilters = new HashMap<String, String>();
        boolean getFilterStr = Crud.askFilters(sc, dbMetadata, tableName, colsFilters);
        if (!getFilterStr) {
            System.out.println("Operation canceled.");
            return;
        }
        ArrayList<String> filterStrList = new ArrayList<String>();
        boolean runAskValues = Crud.askFilterArrangement(sc, dbMetadata, tableName, colsFilters, filterStrList);
        if (!runAskValues) {
            System.out.println("Operation canceled.");
            return;
        }
        Crud.read(dbMetadata.getCon(), tableName, selectedCols.keySet(), filterStrList);
        HashMap<String, String> values = new HashMap<String, String>();
        boolean runUpdate = Crud.askForColsValues(sc, dbMetadata, tableName, values);
        if (!runUpdate) {
            System.out.println("Operation canceled.");
            return;
        }
        Crud.update(dbMetadata.getCon(), tableName, values, filterStrList);
    }

    private static void delete(Scanner sc, DbMetadata dbMetadata, String tableName) {
        System.out.println("Selected Update.");
        HashMap<String, String> selectedCols = new HashMap<String, String>();
        boolean getFilter = Crud.askSelectCols(sc, dbMetadata, tableName, selectedCols);
        if (!getFilter) {
            System.out.println("Operation canceled.");
            return;
        }
        HashMap<String, String> colsFilters = new HashMap<String, String>();
        boolean getFilterStr = Crud.askFilters(sc, dbMetadata, tableName, colsFilters);
        if (!getFilterStr) {
            System.out.println("Operation canceled.");
            return;
        }
        ArrayList<String> filterStrList = new ArrayList<String>();
        boolean runRead = Crud.askFilterArrangement(sc, dbMetadata, tableName, colsFilters, filterStrList);
        if (!runRead) {
            System.out.println("Operation canceled.");
            return;
        }
        Crud.read(dbMetadata.getCon(), tableName, selectedCols.keySet(), filterStrList);
        System.out.print("You are about to delete the displayed registries. To cancel, enter -1: ");
        boolean runDelete = sc.nextInt() != -1 ? true : false;
        if (!runDelete) {
            System.out.println("Operation canceled.");
            return;
        }
        Crud.delete(dbMetadata.getCon(), tableName, filterStrList);
    }
}
